pipeline {
    agent any

    environment {
        USER = 'ubuntu'
        BASTION_IP = credentials('bastion-ip')
        PRIVATE_IP1 = credentials('private-ip1')
        PRIVATE_IP2 = credentials('private-ip2')
    }

    stages {
        stage('deploying') {
            steps {
                sh 'echo we are ready to deploy ....'
            }
        }

        stage('connect to servers') {
            parallel {
                stage('deploy to first-instance') {
                    steps {
                        withCredentials([
                            string(credentialsId: 'private-key-1', variable: 'PRIVATE_KEY_1'),
                            string(credentialsId: 'private-key-2', variable: 'PRIVATE_KEY_2')
                        ]) {
                            sh '''
                                set -e

                                echo "$PRIVATE_KEY_1" > bastion_key.pem
                                echo "$PRIVATE_KEY_2" > instance_key.pem
                                chmod 600 bastion_key.pem instance_key.pem

                                eval $(ssh-agent -s)
                                ssh-add bastion_key.pem
                                ssh-add instance_key.pem

                                ssh -o StrictHostKeyChecking=no -J ${USER}@${BASTION_IP} ${USER}@${PRIVATE_IP1} \
                                  "echo ✅ Déploiement sur la première instance privée réussi ! && hostname"

                                ssh-agent -k
                                rm bastion_key.pem instance_key.pem
                            '''
                        }
                    }
                }

                stage('deploy to second-instance') {
                    steps {
                        withCredentials([
                            string(credentialsId: 'private-key-1', variable: 'PRIVATE_KEY_1'),
                            string(credentialsId: 'private-key-2', variable: 'PRIVATE_KEY_2')
                        ]) {
                            sh '''
                                set -e

                                echo "$PRIVATE_KEY_1" > bastion_key.pem
                                echo "$PRIVATE_KEY_2" > instance_key.pem
                                chmod 600 bastion_key.pem instance_key.pem

                                eval $(ssh-agent -s)
                                ssh-add bastion_key.pem
                                ssh-add instance_key.pem

                                ssh -o StrictHostKeyChecking=no -J ${USER}@${BASTION_IP} ${USER}@${PRIVATE_IP2} \
                                  "echo ✅ Déploiement sur la deuxième instance privée réussi ! && hostname"

                                ssh-agent -k
                                rm bastion_key.pem instance_key.pem
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'the pipeline is successful.'
        }
        failure {
            echo 'the pipeline fails.'
        }
    }
}
