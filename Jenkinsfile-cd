pipeline {
    agent any

    environment {
        USER = 'ubuntu'  
        BASTION_IP = credentials('bastion-ip')  
        PRIVATE_IP1 = credentials('private-ip1') 
        PRIVATE_IP2 = credentials('private-ip2')
        IMAGENAME = 'dahami03/app'
    }

    stages {
        stage('deploying') {
            steps {
                sh 'echo we are ready to deploy ....'
            }
        }

        stage('connect to servers') {
            parallel {
                stage('deploy to first-instance') {
                    steps {
                        withCredentials([
                            file(credentialsId: 'private-key-1', variable: 'PRIVATE_KEY_1'),
                            file(credentialsId: 'private-key-2', variable: 'PRIVATE_KEY_2')   
                        ]){
                        script{
                            def commitid = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                            sh """
                                eval $(ssh-agent -s)
                                ssh-add ${PRIVATE_KEY_1}
                                ssh -o StrictHostKeyChecking=no ${USER}@${BASTION_IP}
                                ssh-add ${PRIVATE_KEY_2}
                                ssh -o StrictHostKeyChecking=no -J ${USER}@${BASTION_IP} ${USER}@${PRIVATE_IP1}\
                                "docker pull ${IMAGENAME}:${commitid} && docker run -d --name app -p 80:3000 ${IMAGENAME}:${commitid}"
                            """
                        }
                        }
                        }
                    }
                }

                stage('deploy to second-instance') {
                    steps {
                        withCredentials([
                            file(credentialsId: 'private-key-1', variable: 'PRIVATE_KEY_1'),
                            file(credentialsId: 'private-key-2', variable: 'PRIVATE_KEY_2')   
                        ]){
                        script{  
                            def commitid = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                            sh """
                                eval $(ssh-agent -s)
                                ssh-add ${PRIVATE_KEY_1}                            
                                ssh -o StrictHostKeyChecking=no ${USER}@${BASTION_IP}                   
                                ssh-add ${PRIVATE_KEY_2}
                                ssh -o StrictHostKeyChecking=no -J ${USER}@${BASTION_IP} ${USER}@${PRIVATE_IP2} \
                                "docker pull $IMAGENAME:${commitid} && docker run -d --name app -p 80:3000 $IMAGENAME:${commitid}"
                            """
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'the pipeline is successful.'
        }
        failure {
            echo 'the pipeline fails.'
        }
    }
}